#! /usr/bin/env python3

from bs4 import BeautifulSoup
import concurrent.futures
import argparse
import requests
import copy
import sys


# parse user inputs
parser = argparse.ArgumentParser(prog='forms', description='finds all forms, automates posting', epilog='Good luck!')          
parser.add_argument('target', help="target page to parse eg: 'http://10.10.10.10/index.html'")
parser.add_argument('-f', '--form', help="specify the form number if there are multiple forms on a page", default=0)
parser.add_argument('-a', '--auto', help="specify all variables via the command line, eg: 'username=admin,password=P@$$w0rd' or 'user=admin,password=./list'. Filenames without a '/' character in will be read as a single word and not opened as a file")
parser.add_argument('-t', '--threads', help="specify the number of threads (default: 10)", default=10)
parser.add_argument('-p', '--proxy', help="set a proxy eg. -p http://127.0.0.1:8080", default={})
parser.add_argument('-v', '--verbose', action='store_true', help="print all form values")
parser.add_argument('-vv', '--vverbose', action='store_true', help="print each result data and it's header")
args = parser.parse_args()

# check for errors
if args.form:
    try:
        args.form = int(args.form)
    except:
        print("form number must be an integer")
        exit()
        
if args.proxy:
    try:
        args.proxy = {"http":args.proxy, "https":args.proxy}
    except:
        print("proxy failed to initialize")
        exit()

    

def send_form(fields, log, f=None):
    """ send the form with the user supplied fields, f is the file, if one has been specified """

    global args
    session = requests.Session()


    # if a file has been passed, copy fields to not overwrite the original,
    # read the next line and update the new fields with that line
    if f:
        fields = copy.copy(fields)
        try:
            line = f.readline().replace("\n", "")
        except:
            return False
        if not line:
            return False  
        for key, val in fields.items():
            if "/" in val:
                fields[key] = line

    # get the latest page values
    request = session.get(args.target, proxies=args.proxy)
    soup = BeautifulSoup(request.content, "html.parser")

    # check there are enoough forms
    try:
        form = soup.find_all("form")[args.form]
    except:
        print("there aren't enough forms at the page you requested")
        exit()

    # setup and clean action variable
    action = form.get("action")
    if action == "None" or action == "none" or action == "#" or action == None:
        action = ""

    # setup post_url variable
    post_url = args.target + action
    if post_url.count("https://") > 1:
        post_url = post_url[post_url.rfind("https://"):]
    if post_url.count("http://") > 1:
        post_url = post_url[post_url.rfind("http://"):]

    inputs = form.find_all("input")

    # create the values dict
    values = {}
    for inp in inputs:

        # skip if there is no name
        if inp.get("name") == None or inp.get("name") == "":
            continue
        
        # clean the value
        if inp.get("value") == None:
            values[inp.get("name")] = ""
        else:
            values[inp.get("name")] = inp.get("value")

    # overwrite with personal
    for key, val in fields.items():
        values[key] = val

    # send the request
    request = session.post(post_url, data=values, proxies=args.proxy)

    # print output to the user
    print(f"status: {request.status_code} \t length: {len(request.text)} \t fields: {fields}")

    # format logging
    headers = ''.join([str((k, v)) for k, v in request.headers.items()])
    log.write(f"status: {request.status_code} \t length: {len(request.text)} \t fields: {values} \t headers: {headers} text: {request.text}".replace("\n","\\n"))
    log.write("\n\n")
    
    if args.verbose:
        print(values)
        
    if args.vverbose:
        for k,v in request.headers.items():
            print(f"{k}: {v}")
        print(request.text)


if __name__ == "__main__":

    # user just wants to see the forms available on a page
    if not args.auto:
        session = requests.Session()
        request = session.get(args.target, proxies=args.proxy)
        soup = BeautifulSoup(request.content, "html.parser")
        forms = soup.find_all("form")
        for i, form in enumerate(forms):
            print(f"FORM: {i}:")
            print(f"=========")
            action = form.get("action")
            if action == None:
                print(f"action: /")
            else:
                print(f"action: {action}")
            inputs = form.find_all("input")
            for inp in inputs:
                name = inp.get("name")
                value = inp.get("value")
                if name and value:
                    print(f"{name}: {value}")
                if name and not value:
                    print(f"{name}: ")                
            print("\n")
        exit()
    
    
    # user wants to automate sending the form
    if args.auto:
        fields = dict((a.strip(), b.strip())
            for a, b in (element.split('=')
                for element in args.auto.split(',')))
        log = open("forms.log", "w")
        for k,v in fields.items():
            if "/" in v:
                executor = concurrent.futures.ThreadPoolExecutor(max_workers=int(args.threads))
                try:
                    f = open(v)
                except:
                    continue


                while True:
                    e = executor.submit(send_form, fields, log, f)
                    
                    if e.result() == False:
                        f.close()
                        log.close()
                        exit()
                        

        ## single request
        args.vverbose = True
        send_form(fields, log)
    
    

    
